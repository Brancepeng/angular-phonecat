

请在stackoverflow中搜索：

    AngularJS: What is the need of the directive's link function when we already had directive's
controller with scope?

比如说，我想在指令的作用域和模板中来出来一些操作，但是好像在link（）函数或者controller（）函数中都可达到目的，因为
两者都可以和作用域通信。

那么：When is it the case when I have to use link function and not the controller ?

在什么情况下不得使用link函数而不是用controller函数呢？

angular.module('myApp').directive('abc', function($timeout) {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        scope: true,
        link: function(scope, elem, attr) { /* link function */ },
        controller: function($scope, $element) { /* controller function */ }
    };
}


当然，我也知道在link函数中是一个非angular世界。所以我可以使用$watch,$digest,$apply.

也就是说：What is the significance of link function ? ( When we had controller already )

首先，下面参考的是Quora上的答案：Angular directive functions: controller vs link vs compile


How many times did you scratch your head against directive scope, or confuse between compile,
controller, and link functions？Let’s me help you understand those functions in this article.


So when writing a AngularJS directive, you can use these function to manipulate content, look
and behavior of the directive, they are:

compile function,controller function,pre-link function,post-link function.


Most of us are familiar with post-link function because we see it in most of AngularJS tutorials.
Most of time we don't need to use pre-link function.


Here is the rules for those functions:


compile should be used when you need modify directive template, like add new expression, append
another directive inside this directive…those things . you’ll need to use compile function to do
those jobs.


controller is used when you need to share or reuse $scope data. Or when you want directive
interactive with each other.


link is the function which used when you need to attach event handler, modify DOM.


这里注释：angular.element这个函数的使用：

封装一个原生DOM元素或者HTML字符串为一个jQuery对象。
If jQuery is available, angular.element is an alias for the jQuery function.If jQuery is not
available, angular.element delegates to Angular's built-in subset of jQuery, called "jQuery lite"
or jqLite.


Note1：All element references in Angular are always wrapped with jQuery or jqLite (such as the element
argument in a directive's compile / link function). They are never raw DOM references.


Note2：Keep in mind that this function will not find elements by tag name / CSS selector. For
lookups by tag name, try instead angular.element(document).find(...) or $document.find(), or
use the standard DOM APIs, e.g. document.querySelectorAll().



Below is an example of compile function：


angular.module('app',[])
    .directive('compileExample',compileExample);

function compileExample(){
    return {

        restrict:'E',
        scope:true,
        compile:function(tElement,tAttrs){

            angular.element(tElement).append('My name is {{name}}');

            return function postLink(csope,element,attrs){

                    scope.name = "David";


            }


        }

    };
}
上面的例子详见:angular-compile.html


In the compile function, we append an expression {{name}} into the template and in the link
function, we assign “David” to scope.name and directive return: “My name is David”.

We can’t do that in the postLink function because it can’t compile angular expression.

About the controller function, it’s used when we need to share $scope variables or function or reuse it in another directive.


Here is the example of our directive.


angular.module('app',[])

    .directive('parentDirective',parentDirective)
    .directive('childDirective',childDirective);

    function parentDirective(){

        return {

            restrict:'E',

            scope:true,

            controller:function($scope){

                  $scope.name = 'Ronaldo';
                  $scope.say = function() {
                    alert('Hello ' + $scope.name);
                  }
            }

        }
    }

    function childDirective(){

                return{
                    restrict:'E',

                    require:'^parentDirective'

                    link:function(scope){

                        scope.name = 'Elisa';
                        scope.say();

                    }
                }
    }

So when the childDirective is instantiated, we see the alert box with message: “Hello Elisa”. The
say() method is inherited from the parentDirective, we change $scope.name from Ronaldo to Elisa and
get that nice message.



Conclusion:

First time when you work with Angular directive, you may confuse about compile, controller and link function. So here is the usage for those functions:


Compile is used for modify directive template, append Angular expression, inject another directive to the parent directive.


Controller is used when you need to share or reuse directive method.


Link is used when you need to modify DOM, attach event handler or run some jQuery code.


下面答案来自stackoverflow:

How do angular directives work in a nutshell:


1.first,let's begin with a template.

var str = '<div my-directive>{{5+6}}</div>';

2,now,the str template is wrapped as an angular element.

var el = angular.element(str);

3.With el,now we compile it with $compile to get back the link function.


var l = $compile(el);

here is what happens:

 1.$compile 遍历所有的模板，并且收集所有的可识别的指令。

 2.所有被识别的指令递归编译，并且他们的link函数也被收集。

 3.然后，所有的link函数被封装在一个link函数中，并且以l（l = $compile(el)）的形式返回。

4.最后，我们提供scope（作用域）给l这个link函数，（给定l函数一个执行上下文（作用域scope和相关变量，例如被操作的相关的
DOM元素。），执行被封装的link函数里面的link函数集）。

5.This adds the template as a new node to the DOM and invokes controller which adds its watches to the scope
which is shared with the template in DOM.

5，这个过程会将模板作为一个新的DOM节点添加到DOM树中，然后触发控制器controller，这个控制器里面，可以添加它的监听
对象到相应的作用域中，（这个作用域是和模板共享的作用域。）

说道这里，总结比较一下compile，link，controller这三个函数的区别。

1.每个指令都只编译一次，但是他们的link函数可以被重复使用。因此，如果一个对象要想被一个directive的所有实例使用，

那么，这个对象必须在这个指令的$compile函数中申明，并赋值。

2.在编译完成之后返回的link函数，这个link函数在什么时候执行？
 it will be executed while attaching the template to the DOM.
 所以，我们会在link函数中添加基于scope处理的事件，或者操作模板中的DOM。

3.最后，当这个指令作用在DOM（模板被添加到DOM树之后）上时，对应申明的controller就会生效，并且与数据模型交互。

因此：

1.在link阶段完成之后，视图设置完成，对于MVC框架而言，$scope就是[M]，$controller就是[C].
After setting up the view[V] (i.e. template) with link, $scope is our [M] and $controller is our [C]
in M V C

2.通过在scope上设置监听对象具有双向绑定数据的优势。
Take advantage of the 2-way binding with $scope by setting up watches.
3.$scope对象上添加你所需要监听的（可以双向绑定的）对象，可以在这个controller生效。因为在controller中，
可以在运行时监听模板中任何对象的变化。
$scope watches are expected to be added in the controller since this is what is watching the template
during run-time。
4.最后，controller也可以用在相关得指令之间相互交互。

Finally, controller is also used to be able to communicate among related directives. (Like myTabs example in
https://docs.angularjs.org/guide/directive)

5.同样，我们也可以在link函数中实现上面的所有需求。
 It's true that we could have done all of this in the link function as well, but it's about
separation of concerns.







