

关于angualrjs如何控制通信的问题，不少刚接触angulajs的同学是想知道的。总的来说，angular控制器通信的方式有三种：

1.利用作用域的继承方式。即子控制器继承父控制器的内容。

2.基于事件的方式。即$on,$emit,$broadcast.这三种方式。

3.服务方式。写一个服务的单例然后通过注入来使用。


利用作用域继承的方式：
由于作用域的继承是基于javascript的原型继承，所以这里分为两种情况。当做用域的值为基本类型的时候，修改父作用域上面
的值会影响到子作用域。反之，修改子作用域的值不会影响父作用域，如果，需要共享一个值得话，就要把这个值放到一个对象上
面，这样任何一方修改都能影响到对方，这是因为在js中对象都是引用类型。

基本类型

    function Sandcrawler($scope) {
    $scope.location = "Mos Eisley North";
    $scope.move = function(newLocation) {
        $scope.location = newLocation;
    }
};
function Droid($scope) {
    $scope.sell = function(newLocation) {
        $scope.location = newLocation;
    }
}


//html


    <div ng-controller="Sandcrawler">
    <p>Location: </p>
    <button ng-click="move('Mos Eisley South')">Move</button>
    <div ng-controller="Droid">
        <p>Location: </p>
        <button ng-click="sell('Owen Farm')">Sell</button>
    </div>
</div>



对象类型：

    function Sandcrawler($scope) {
    $scope.obj = {location:"Mos Eisley North"};
}
function Droid($scope) {
    $scope.summon = function(newLocation) {
        $scope.obj.location = newLocation;
    }
}


//html

    <div ng-controller="Sandcrawler">
    <p>Sandcrawler Location: </p>
    <div ng-controller="Droid">
        <button ng-click="summon('Owen Farm')">
            Summon Sandcrawler
        </button>
    </div>
</div>


基于事件的方式：

一般情况下基于继承的方式已经满足大部分情况了，但是这种没有实现兄弟控制器之间的通信方式，所以引出了事件的方式。

基于事件的方式中，我们可以使用$on,$emit,$broadcast这几个方式来实现。

其中，$on表示事件监听，$emit表示想父级以上作用域发射（触发）事件，$broadcast表示想子集一下作用域广播事件。

参考代码文件夹：“兄弟controller之间的通信”

从这个用法中我们可以引申出一种用于控制兄弟控制器间进行通信的方法。首先，我们一个兄弟控制器向父作用域触发一个事
件，然后在父作用域中监听事件，再广播给子作用域，这样通过事件携带的参数，实现了数据经过父作用域，在兄弟作用域之
间传播。
这里要注意的是，通过父元素作为中介进行传递的话，兄弟元素用的事件名不能一样，否则会进入死循环。请看代码：index3.html和controller3.js


angular服务的方式


在ng中服务是一个单例，所以在服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。参照下面一个例子：

一个控制器修改了服务对象的值，在另一个控制器中获取到修改后的值：参考index4.html和4.js






